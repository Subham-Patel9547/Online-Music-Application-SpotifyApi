import React, { useState, useRef, useEffect } from "react";
import ProgressCircle from "./ProgressCircle";
import './AudioPlayer.css';
import WaveAnimation from "./WaveAnimation";
import Control from './Control';

export default function AudioPLayer({
  currentTrack,
  currentIndex,
  setCurrentIndex,
  total,
}) {
  const [isPlaying, setIsPlaying] = useState(false);
  const [trackProgress, setTrackProgress] = useState(0);
  const audioSrc = total[currentIndex]?.track.preview_url;

  const audioRef = useRef(new Audio(audioSrc));
  const intervalRef = useRef();
  const isReady = useRef(false);

  const { duration } = audioRef.current;

  const currentPercentage = duration ? (trackProgress / duration) * 100 : 0;

  useEffect(() => {
    // Reset and play audio when the source or playback state changes
    if (audioSrc) {
      audioRef.current.src = audioSrc;
      setTrackProgress(0); // Reset progress when changing track
    }
  }, [audioSrc]);

  useEffect(() => {
    const audioElement = audioRef.current;

    const updateProgress = () => {
      if (!audioElement.paused) {
        setTrackProgress(audioElement.currentTime);
      }
    };

    if (isPlaying) {
      audioElement.play().catch(error => console.error('Playback error:', error));
      intervalRef.current = setInterval(updateProgress, 1000);
    } else {
      audioElement.pause();
      clearInterval(intervalRef.current);
    }

    return () => {
      clearInterval(intervalRef.current);
      audioElement.pause();
    };
  }, [isPlaying]);

  useEffect(() => {
    if (audioRef.current.src !== audioSrc) {
      audioRef.current.pause();
      audioRef.current = new Audio(audioSrc);
      setTrackProgress(0); // Reset progress when track changes

      if (isReady.current) {
        audioRef.current.play().catch(error => console.error('Playback error:', error));
        setIsPlaying(true);
      } else {
        isReady.current = true;
      }
    }
  }, [currentIndex]);

  const handleNext = () => {
    if (currentIndex < total.length - 1) {
      setCurrentIndex(currentIndex + 1);
    } else {
      setCurrentIndex(0);
    }
  };

  const handlePrev = () => {
    if (currentIndex - 1 < 0) {
      setCurrentIndex(total.length - 1);
    } else {
      setCurrentIndex(currentIndex - 1);
    }
  };

  const addZero = (n) => {
    return n > 9 ? "" + n : "0" + n;
  };

  const artists = currentTrack?.album?.artists.map((artist) => artist.name) || [];

  return (
    <div className="player-body flex">
      <div className="player-left-body">
        <ProgressCircle
          percentage={currentPercentage}
          isPlaying={true}
          image={currentTrack?.album?.images[0]?.url}
          size={250}
          color="black"
        />
      </div>
      <div className="player-right-body flex">
        <p className="song-title">{currentTrack?.name}</p>
        <p className="song-artist">{artists.join(" | ")}</p>
        <div className="player-right-bottom flex">
          <div className="song-duration flex">
            <p className="duration">0:{addZero(Math.round(trackProgress))}</p>
            <WaveAnimation isPlaying={isPlaying} />
            <p className="duration">0:30</p>
          </div>
          <Control
            isPlaying={isPlaying}
            setIsPlaying={setIsPlaying}
            handleNext={handleNext}
            handlePrev={handlePrev}
            total={total}
          />
        </div>
      </div>
    </div>
  );
}
